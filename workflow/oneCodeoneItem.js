"use strict";

const { sequelize, Item, Price, Code, ItemCode } = require("../models");
const DAY = 24 * 60 * 60 * 1000; // One day in milliseconds

(async () => {
  // Sync all table in database, delete if already exist then create
  // { force: true } for this assignment purpose only
  await sequelize.sync({ force: true });

  const items = ["gun", "bow", "knife", "sword"];
  // Create items
  items.forEach(async (item) => {
    await Item.create({
      name: item,
      description: "Dummy weapon description",
    });
  });
  // Find and log all row in Item
  const foundItems = await Item.findAll({});
  foundItems.forEach((item) => console.log(item.dataValues));

  // Case 1: suppose we want to sell sword from now to the next 7 days with a normal price: 400/ea
  // and for the first 3 days we have a promotion to sell with the price: 300/ea

  // Step 1: Find sword id from Item and create an instance of Price model
  const sword = await Item.findOne({ where: { name: "sword" } });
  let swordId;
  if (sword) {
    swordId = sword.id;
  }
  console.log("Sword ID : ", swordId);

  const priceOneItem = await Price.create({
    promotion_price: 300,
    normal_price: 400,
    // Null on promotion_open_sale_date can be seperate on two case
    // 1: if sale_start_date is not null, the promotion price already valid until promotion_end_sale_date
    // 2. if sale_end_date is also null, the promotion price is not valid. Use normal price
    promotion_open_sale_date: Date.now(),
    // Null on promotion_end_sale_date means promotion valid till end_sale_date (code table)
    promotion_end_sale_date: Date.now() + 3 * DAY,
  });
  const priceId = priceOneItem.id;
  console.log("Price Id: ", priceId);

  // Step 2: decide  how many codes(of sword) you want to sell
  const totalCode = 4; // want to sell 4 codes of one sword per code

  // Step 3: Insert total 4 codes (from step 2) into Code table
  // Note: the code itself will be auto generated by Sequelize as defined default value in Code model
  for (let i = 0; i < totalCode; i++) {
    const itemCode = await Code.create({
      sale_start_date: Date.now(),
      sale_end_date: Date.now() + 7 * DAY,
      code_details: "Get one sword",
      // priceId: priceId,
    });

    // Add price to code by special method
    await itemCode.setPrice(priceOneItem);

    // Step 4: insert 4 rows(4 codes * 1 item/code ) 
    // into Item_code table by special method
    await itemCode.addItem(sword);
  }

  // Check result
  const searchValues = await Item.findOne({
    where: { name: "sword" },
    include: Code,
  });
  console.log(searchValues.toJSON());
  ////// End case 1  /////////
})();
