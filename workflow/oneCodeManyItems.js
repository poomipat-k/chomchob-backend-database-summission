"use strict";

const { sequelize, Item, Price, Code, ItemCode } = require("../models");
const DAY = 24 * 60 * 60 * 1000; // One day in milliseconds

(async () => {
  // Sync all table in database, delete if already exist then create new one
  // { force: true } for this assignment purpose only
  await sequelize.sync({ force: true });

  const items = ["gun", "bow", "knife", "sword"];
  // Create items
  items.forEach(async (item) => {
    await Item.create({
      name: item,
      description: "Dummy weapon description",
    });
  });
  // Find and log all row in Item
  const foundItems = await Item.findAll({});
  foundItems.forEach((item) => console.log(item.dataValues));

  // Case 2: suppose we want to sell [gun, bow, knife] in a bundle from now to the next 30 days with a normal price: 1000/ea
  // and for the first 10 days we have a promotion to sell with the price: 700/ea

  // Remark in case choose random box of 3 item, random select 3 distince item from items array.
  // The remaining steps are the same with example below

  // Step 1: Find gun, bow, knife and create one price instance
  const gun = await Item.findOne({ where: { name: "gun" } });
  const bow = await Item.findOne({ where: { name: "bow" } });
  const knife = await Item.findOne({ where: { name: "knife" } });
  const bundle = [gun, bow, knife];

  const priceForBundle = await Price.create({
    promotion_price: 700,
    normal_price: 1000,
    // Null on promotion_open_sale_date can be seperate on two case
    // 1: if sale_start_date is not null, the promotion price already valid until promotion_end_sale_date
    // 2. if sale_end_date is also null, the promotion price is not valid. Use normal price
    promotion_open_sale_date: Date.now(),
    // Null on promotion_end_sale_date means promotion valid till end_sale_date (code table)
    // Promotion for 10 days
    promotion_end_sale_date: Date.now() + 10 * DAY,
  });

  const priceId = priceForBundle.id;
  console.log("Price Id: ", priceId);

  // Step 2: determine how many bundle you want to sell
  const bundleCodeToSell = 4;

  // Step 3: Insert 4 bundle code from step 2 into code table
  // Note: the code itself will be auto generated by Sequelize as defined default value in Code model
  for (let i = 0; i < bundleCodeToSell; i++) {
    const itemCode = await Code.create({
      sale_start_date: Date.now(),
      // Open for customer to purchase for 30 days
      sale_end_date: Date.now() + 30 * DAY,
      // What customer will get from using the code
      code_details: "Get one gun, one bow and one knife",
      // priceId: priceId,
    });

    // Add price to code by special method (generate by Sequelize)
    itemCode.setPrice(priceForBundle);

    // Step 4: insert 12 rows (3 items/code * 4 bundle code)
    // into item_code table via special method

    bundle.forEach(async (item) => await itemCode.addItem(item));
  }

  /////// Case 2: End ////////
  // Check how many codes were created
  const result = await Code.findAll({
    where: {
      priceId: priceId,
    },
    include: Item,
  });
  console.log("codes were created", result.length);

  const AllrowInItemCode = await ItemCode.findAll();
  console.log("row were inserted to ItemCode ", AllrowInItemCode.length); // 12
})();
